---
import '../styles/global.css';
import CVTag from './CVTag.astro';
import Button from './button.astro';
interface DocLink {
    title: string;
    url: string;
}

export interface Props {
    name: string;
    degree?: string;
    yearStart: string;
    yearEnd?: string;
    tags?: string[];
    grade?: string;
    location?: string;
    docs?: DocLink[];
}

const { name, degree, yearStart, yearEnd, tags, grade, location, docs } = Astro.props;

let yearDisplay: string;
if (!yearEnd) {
    yearDisplay = `since ${yearStart}`;
}
else if (yearStart === yearEnd) {
    yearDisplay = yearStart;
}
else {
    yearDisplay = `${yearStart} - ${yearEnd}`;
}
const sortedTags = (tags ?? []).sort((a, b) => a.localeCompare(b));

---

<li class="mb-10 ms-6">
  <span class="absolute flex items-center justify-center w-6 h-6 bg-accentLight rounded-full -start-3 ring-8 ring-light dark:ring-gray-900 dark:bg-accentDark">
    <svg class="w-2.5 h-2.5 text-dark dark:text-blue-300" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
      <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"/>
    </svg>
  </span>

  <h3 class="mb-1 text-lg font-semibold text-gray-900 dark:text-white">
    {name}
    {degree && (
      <span class="bg-accentLight text-sm font-medium ms-3 px-2.5 py-0.5 rounded-sm dark:bg-accentDark dark:text-blue-300">
        {degree}
      </span>
    )}
  </h3>

  <time class="block mb-2 text-sm font-normal leading-none text-gray-400 dark:text-gray-500">
    {yearDisplay}
  </time>

  {location && (
    <p class="mb-1 text-base font-normal text-gray-500 dark:text-gray-400 italic">
      {location}
    </p>
  )}

  {grade && (
    <p class="mb-1 text-base font-normal text-gray-500 dark:text-gray-400">
      Final Grade: <span class="font-semibold">{grade}</span>
    </p>
  )}
  <div class="mb-2 text-base text-gray-600 dark:text-gray-300">
    <slot />
  </div>
  {tags && tags.length > 0 && (
    <ul class="flex flex-wrap gap-2 mt-2">
      {sortedTags.map((tag) => (<CVTag tag={tag} />))}
    </ul>
  )}
</li>