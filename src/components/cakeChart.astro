---
import '../styles/global.css';
import Button from './button.astro';

interface DocLink {
    title: string;
    url: string;
    external?: boolean;
    small: boolean;
}
export interface Props {
  title: string;
  id: string;
  properties: {
    title: string;
    percentage: number;
    color: string;
    description: string;
  }[];
  docs?: DocLink[];
}
const { title, id, properties, docs } = Astro.props;
const series = properties.map((p) => p.percentage);
const labels = properties.map((p) => p.title);
const colors = properties.map((p) => p.color);
const descriptions = properties.map((p) => p.description);
const size = 100 / properties.length;
---
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

<script is:inline define:vars={{series, labels, colors, descriptions, size, id}}>
const getChartOptions = () => {
  return {
    series: series,
    colors: colors,
    
    chart: {
      height: "250px",
      width: "100%",
      type: "radialBar",
      toolbar: {show: false},
      animations: {enabled: true},
      sparkline: {
        enabled: false,
      },
    },
    plotOptions: {
      radialBar: {
        track: {
          background: '#E5E7EB',
        },
        dataLabels: {
          show: false,
        },
        hollow: {
          margin: 0,
          size: size,
        }
      },
    },
    grid: {
      show: false,
      strokeDashArray: 4,
      padding: {
        left: 2,
        right: 2,
        top: -23,
        bottom: -20,
      },
    },
    labels: labels,
    legend: {
      show: true,
      position: "right",
      fontFamily: "Inter",
      labels: {useSeriesColors: false},
  markers: {
    width: 12,
    height: 12
  }
},
    tooltip: {
  enabled: true,
  fillSeriesColor: false,
  custom: function({ series, seriesIndex, w }) {
    const label = w.globals.labels[seriesIndex];
    const value = series[seriesIndex];
    return `<div class="apex-tooltip">
              <span style="font-weight:600">${label}:</span> ${value}%
            </div>`;
  }
},

    yaxis: {
      show:true,
      labels: {
        formatter: function (value) {
          return value + '%';
        }
      }
    },
    states: {
      hover: {
        filter: {
          type: 'none' 
    }
  },
      active: {
        filter: {
          type: 'none'
    }
  }
}
  }
}

document.addEventListener("DOMContentLoaded", () => {
  const target = document.documentElement;

  const renderChart = () => {
    const chart = new ApexCharts(document.querySelector(`#radial-chart-${id}`), getChartOptions());
    chart.render();
  };

  // Wenn bereits "dark" gesetzt ist â†’ sofort rendern
  if (target.classList.contains("dark")) {
    renderChart();
    return;
  }

  // Andernfalls: MutationObserver, der wartet bis "dark" erscheint
  const observer = new MutationObserver(() => {
    if (target.classList.contains("dark")) {
      renderChart();
      observer.disconnect();
    }
  });

  observer.observe(target, { attributes: true, attributeFilter: ["class"] });
});

</script>




<div class="max-w-sm w-full bg-white rounded-lg shadow-sm dark:bg-gray-800 p-4 md:p-6">
  <div class="flex justify-between mb-3">
    <div class="flex items-center">
      <div class="flex justify-center items-center">
        <h5 class="text-xl font-bold leading-none text-gray-900 dark:text-white pe-1">{title}</h5>
        
      </div>
    </div>
  </div>

  <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
    <div class="grid grid-cols-3 gap-3 mb-2">
      {properties.map((p) => (
    <dl class="rounded-lg flex flex-col items-center justify-center h-[78px] bg-gray-50 dark:bg-gray-600">
      <dt class="w-8 h-8 rounded-full text-sm font-medium flex items-center justify-center mb-1"
          style={`background-color: ${p.color}20; color: ${p.color}`}>
        {p.description}
      </dt>
      <dd class="text-sm font-medium" style={`color: ${p.color}`}>{p.title}</dd>
    </dl>
  ))}
      
      
    </div>
  </div>

  <!-- Radial Chart -->
  <div class="py-6" id={`radial-chart-${id}`}></div>

{docs && docs.length > 0 && (
    <ul class="flex flex-wrap gap-2 mt-2">
      {docs.map((doc) => (<Button url={doc.url} title={doc.title} external={doc.external} small={doc.small} />))}
    </ul>
  )}
</div>

